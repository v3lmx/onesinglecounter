name: build & deploy

on:
  workflow_dispatch:

jobs:
  # build server and web
  # dockerize each
  # push to container registry
  build_push:
    name: Build and push image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Load Docker image
        run: docker load < result

      - name: Tag Docker image
        run: docker tag ${{ vars.IMAGE_NAME }}:latest ${{ secrets.REGISTRY }}/${{ vars.IMAGE_NAME }}:latest

      - name: Push Docker image
        run: docker push ${{ secrets.REGISTRY }}/${{ vars.IMAGE_NAME }}:latest

      - run: rm privatekey

  # connect to VPS
  # pull new images from registry
  # update caddy configuration
  # restart docker-compose 
  deploy:
    name: Deploy
    needs: build_push
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt install wireguard
      - run: echo "${{ secrets.WIREGUARD_PRIVATE_KEY }}" > privatekey
      - run: sudo ip link add dev wg0 type wireguard
      - run: sudo ip address add dev wg0 ${{ vars.WIREGUARD_CLIENT_IP }} peer ${{ vars.WIREGUARD_SERVER_IP }}
      - run: sudo wg set wg0 listen-port ${{ vars.WIREGUARD_PORT }} private-key privatekey peer "${{ vars.WIREGUARD_SERVER_PUBLIC_KEY }}" allowed-ips ${{ vars.WIREGUARD_ALLOWED_IPS }} endpoint "${{ secrets.SERVER_IP }}":${{ vars.WIREGUARD_PORT }}
      - run: sudo ip link set up dev wg0

      - name: Add wg hosts to /etc/hosts
        run: |
            sudo echo "${{ vars.WIREGUARD_SERVER_IP }} ${{ secrets.SERVER_PRIVATE_URL }}" | sudo tee -a /etc/hosts


      - name: Checkout repository
        uses: actions/checkout@v4  

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install UglifyJS
        run: npm install -g uglify-js

      - name: Minify JavaScript files
        run: |
          uglifyjs web/script.js --compress dead_code,evaluate,booleans,loops,unused,hoist_funs,hoist_vars,if_return,join_vars --mangle -o script.min.js

      - name: setup ssh
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ci
          chmod 600 ~/.ssh/id_ci
          ssh-keyscan ${{ vars.WIREGUARD_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Copy minified files
        run: |
          rsync -avz -e "ssh -i ~/.ssh/id_ci" ./script.min.js ci@${{ vars.WIREGUARD_SERVER_IP }}:/opt/osc/script.min.js
          rsync -avz -e "ssh -i ~/.ssh/id_ci" ./web/index.html ci@${{ vars.WIREGUARD_SERVER_IP }}:/opt/osc/index.html

      - name: stop older container docker
        continue-on-error: true
        run: |
          ssh -i ~/.ssh/id_ci ci@${{ vars.WIREGUARD_SERVER_IP }} 'HOME=/opt/osc/ docker stop ${{ vars.IMAGE_NAME }}_${{ vars.APP_ENV }}'

      - name: delete older container docker
        continue-on-error: true
        run: |
          ssh -i ~/.ssh/id_ci ci@${{ vars.WIREGUARD_SERVER_IP }} 'HOME=/opt/osc/ docker rm ${{ vars.IMAGE_NAME }}_${{ vars.APP_ENV }}'

      - name: pull new container docker
        run: |
          ssh -i ~/.ssh/id_ci ci@${{ vars.WIREGUARD_SERVER_IP }} 'HOME=/opt/osc/ docker pull ${{ vars.LOCAL_REGISTRY }}/${{ vars.IMAGE_NAME }}:latest'

      - name: run new container docker
        run: |
          ssh -i ~/.ssh/id_ci ci@${{ vars.WIREGUARD_SERVER_IP }} 'HOME=/opt/osc/ docker run -d --name ${{ vars.IMAGE_NAME }}_${{ vars.APP_ENV }} -p${{ vars.APP_PORT }}:${{ vars.APP_PORT }} ${{ vars.LOCAL_REGISTRY }}/${{ vars.IMAGE_NAME }}:latest'
          

          
          



